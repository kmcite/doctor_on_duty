// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/models/case.dart';
import 'domain/models/chapter.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 4383818526270876764),
      name: 'Chapter',
      lastPropertyId: const obx_int.IdUid(7, 4207371744317413248),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5518577314970806738),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7660010977672959829),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 523200553603179236),
            name: 'author',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5363893780885535457),
            name: 'pageCount',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8696121154898089343),
            name: 'publishedOn',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4373151093888246067),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 1117586691515035700),
      name: 'Case',
      lastPropertyId: const obx_int.IdUid(9, 5622812754006024188),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4649990386763301367),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3666040583353505192),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3759570260891358219),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7953515564680845490),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7188064329835286718),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 659382249932108262),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9154034605967792484),
            name: 'definition',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8050736818740290059),
            name: 'epidemiology',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5622812754006024188),
            name: 'chapterId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 8317602717452753499),
            relationTarget: 'Chapter')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 1117586691515035700),
      lastIndexId: const obx_int.IdUid(2, 8317602717452753499),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [5567240294230845996, 1939886503755699563],
      retiredIndexUids: const [1391464922779441018],
      retiredPropertyUids: const [
        6700941335735336355,
        7549490085178677469,
        5712909319424014052,
        5514647075306842425,
        1194860839630142529,
        766353026504380051,
        4207371744317413248,
        3526203191345179863,
        9181011755904302333,
        8105280096002770456,
        8383406488946328381,
        2668916382782194363,
        6422781266664776396,
        644857222747613720,
        5190345126118948997
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Chapter: obx_int.EntityDefinition<Chapter>(
        model: _entities[0],
        toOneRelations: (Chapter object) => [],
        toManyRelations: (Chapter object) => {},
        getId: (Chapter object) => object.id,
        setId: (Chapter object, int id) {
          object.id = id;
        },
        objectToFB: (Chapter object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final authorOffset = fbb.writeString(object.author);
          final pageCountOffset = fbb.writeString(object.pageCount);
          fbb.startTable(8);
          fbb.addOffset(0, nameOffset);
          fbb.addOffset(1, descriptionOffset);
          fbb.addOffset(2, authorOffset);
          fbb.addOffset(3, pageCountOffset);
          fbb.addInt64(4, object.publishedOn.millisecondsSinceEpoch);
          fbb.addInt64(5, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Chapter()
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 4, '')
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..author = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..pageCount = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..publishedOn = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);

          return object;
        }),
    Case: obx_int.EntityDefinition<Case>(
        model: _entities[1],
        toOneRelations: (Case object) => [object.chapter],
        toManyRelations: (Case object) => {},
        getId: (Case object) => object.id,
        setId: (Case object, int id) {
          object.id = id;
        },
        objectToFB: (Case object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final statusOffset = fbb.writeString(object.status);
          final typeOffset = fbb.writeString(object.type);
          final categoryOffset = fbb.writeString(object.category);
          final definitionOffset = fbb.writeString(object.definition);
          final epidemiologyOffset = fbb.writeString(object.epidemiology);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, statusOffset);
          fbb.addOffset(4, typeOffset);
          fbb.addOffset(5, categoryOffset);
          fbb.addOffset(6, definitionOffset);
          fbb.addOffset(7, epidemiologyOffset);
          fbb.addInt64(8, object.chapter.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Case()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..status = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..category = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..definition = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..epidemiology = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '');
          object.chapter.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.chapter.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Chapter] entity fields to define ObjectBox queries.
class Chapter_ {
  /// See [Chapter.name].
  static final name =
      obx.QueryStringProperty<Chapter>(_entities[0].properties[0]);

  /// See [Chapter.description].
  static final description =
      obx.QueryStringProperty<Chapter>(_entities[0].properties[1]);

  /// See [Chapter.author].
  static final author =
      obx.QueryStringProperty<Chapter>(_entities[0].properties[2]);

  /// See [Chapter.pageCount].
  static final pageCount =
      obx.QueryStringProperty<Chapter>(_entities[0].properties[3]);

  /// See [Chapter.publishedOn].
  static final publishedOn =
      obx.QueryDateProperty<Chapter>(_entities[0].properties[4]);

  /// See [Chapter.id].
  static final id =
      obx.QueryIntegerProperty<Chapter>(_entities[0].properties[5]);
}

/// [Case] entity fields to define ObjectBox queries.
class Case_ {
  /// See [Case.id].
  static final id = obx.QueryIntegerProperty<Case>(_entities[1].properties[0]);

  /// See [Case.name].
  static final name = obx.QueryStringProperty<Case>(_entities[1].properties[1]);

  /// See [Case.description].
  static final description =
      obx.QueryStringProperty<Case>(_entities[1].properties[2]);

  /// See [Case.status].
  static final status =
      obx.QueryStringProperty<Case>(_entities[1].properties[3]);

  /// See [Case.type].
  static final type = obx.QueryStringProperty<Case>(_entities[1].properties[4]);

  /// See [Case.category].
  static final category =
      obx.QueryStringProperty<Case>(_entities[1].properties[5]);

  /// See [Case.definition].
  static final definition =
      obx.QueryStringProperty<Case>(_entities[1].properties[6]);

  /// See [Case.epidemiology].
  static final epidemiology =
      obx.QueryStringProperty<Case>(_entities[1].properties[7]);

  /// See [Case.chapter].
  static final chapter =
      obx.QueryRelationToOne<Case, Chapter>(_entities[1].properties[8]);
}
